# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules
.pnp
.pnp.js

# testing
coverage

# next.js
.next/
out/
build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# turbo
.turbo

# Temporary directories
.cache

# tmp files
*.tmp
*.log

## https://github.com/github/gitignore/blob/main/Python.gitignore
# PYTHON - I haven't added them all
.venv/
.pytest_cache/
__pycache__/
*.py[cod]
*$py.class

# DJANGO
*.pot
*.pyc
db.sqlite3
media
.db-backups/
migrations/

# Backup files # 
*.bak 

# EXERCISM
# CPP catch file is huge - don't commit and instead use a script to copy over before running `cmake`
challenges/exercism/cpp/**/test/catch.hpp

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Terraform state files
*.tfstate
*.tfstate.backup

# Terraform working directory
**/.terraform/*

# Ignore lock files in playgrounds
**/.terraform.lock.hcl

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# plans
tfplan
